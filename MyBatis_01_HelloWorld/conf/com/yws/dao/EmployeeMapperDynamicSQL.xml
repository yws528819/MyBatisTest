<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yws.dao.EmployeeMapperDynamicSQL">
	<!--  -->
	<select id="getEmpsByConditionIf" resultType="com.yws.bean.Employee">
		select * from tbl_employee
		<!-- where 1=1 -->
		<where>
		<!--test：判断表达式(OGNL) 
			OGNL参照官方文档
				c:if test
			从参数中取值进行判断
			遇见特殊符号应该去写转义字符；
			见https://www.w3school.com.cn/tags/html_ref_entities.html 
				HTML ISO-8859-1
			"" &quot;&quot;
			&& &amp;&amp;	
		 -->
			<if test="id != null">
				id = #{id}
			</if>
			<if test="lastName != null &amp;&amp; lastName.trim() != &quot;&quot;">
				and last_name like #{lastName}
			</if>
			<if test="email != null and email.trim() != ''">
				and email = #{email}
			</if>
			<!-- ognl会进行字符串与数字的转换判断 "0"==0 -->
			<if test="gender == 0 or gender == 1">
				and gender = #{gender}
			</if>		
		</where>
	</select>
	
	
	<select id="getEmpsByConditionTrim" resultType="com.yws.bean.Employee">
		select * from tbl_employee
		<!-- 后面多出的and或者or where标签不能解决
			trim标签体中是整个字符串拼接后的结果
			prefix=""
				前缀：给拼串后的整个字符串加一个前缀
			prefixOverrides="" 
				前缀覆盖：去掉整个字符串开头多余的字符
			suffix="" 
				后缀：给拼串后的整个字符串加一个后缀
			suffixOverrides=""
				后缀覆盖：去掉整个字符串结尾多余的字符
		 -->
		 <!-- 自定义字符串截取规则 -->
		<trim prefix="where" suffixOverrides="and">
			<if test="id != null">
				id = #{id} and
			</if>
			<if test="lastName != null &amp;&amp; lastName.trim() != &quot;&quot;">
				last_name like #{lastName} and
			</if>
			<if test="email != null and email.trim() != ''">
				email = #{email} and
			</if>
			<!-- ognl会进行字符串与数字的转换判断 "0"==0 -->
			<if test="gender == 0 or gender == 1">
				gender = #{gender} and
			</if>		
		</trim>
					
	</select>
	
	
	<select id="getEmpsByConditionChoose" resultType="com.yws.bean.Employee">
		select * from tbl_employee
		<where>
			<!-- 
				如果带了id就用id查，如果带了lastName就用lastName查，只会进入其中一个
			 -->
			<choose>
				<when test="id != null">
					id = #{id}
				</when>
				<when test="lastName != null">
					last_name like #{lastName}
				</when>
				<when test="email != null">
					email = #{email}
				</when>
				<otherwise>
					gender = '0'
				</otherwise>
			</choose>			
		</where>
					
	</select>

	<update id="updateEmp">
		update 
			tbl_employee
		<!-- set标签的使用 -->
<!-- 		<set>
			<if test="id != null">
				id = #{id},
			</if>
			<if test="lastName != null &amp;&amp; lastName.trim() != &quot;&quot;">
				last_name = #{lastName},
			</if>
			<if test="email != null and email.trim() != ''">
				email = #{email},
			</if>
			<if test="gender != null">
				gender = #{gender},
			</if>				
		</set> -->
		<!-- trim 拼串更新  -->
		<trim prefix="set" suffixOverrides=",">
			<if test="id != null">
				id = #{id},
			</if>
			<if test="lastName != null &amp;&amp; lastName.trim() != &quot;&quot;">
				last_name = #{lastName},
			</if>
			<if test="email != null and email.trim() != ''">
				email = #{email},
			</if>
			<if test="gender != null">
				gender = #{gender},
			</if>			
		</trim>
	</update>
	
	
	<select id="getEmpsByConditionForeach" resultType="com.yws.bean.Employee">
		select * from tbl_employee where id in
		<!-- 
			collection：指定要遍历的集合；
				list类型的参数会特殊处理封装在Map中，map的key就叫list
			item：将遍历出的元素赋值给指定的变量
			seperator：每个元素之间的分隔符
			open：遍历出所有结果拼接一个开始的字符
			close：遍历出所有结果拼接一个结束的字符
			index：索引。遍历list的时候index就是索引，item就是当前值
					   遍历map的时候index表示的就是map的key，item就是map的值
			
			
			#{变量名}就能取出变量的值也就是当前遍历出的元素
		 -->	
		 <foreach collection="ids" item="item_id" separator="," 
		 	open="(" close=")" index="">
		 	#{item_id}
		 </foreach>
		 
<!-- 		 <foreach collection="ids" item="item_id" separator="," 
		 	open="where id in (" close=")" index="">
		 	#{item_id}
		 </foreach> -->
	</select>
	
	<!-- 
		MySql下批量保存：可以foreach遍历mysql支持 values(),(),()语法
	 -->
	<insert id="addEmps">
		insert into tbl_employee (
			<include refid="insertColumn">
				<property name="testColumn" value="gender"/>
			</include>
		)
		values 
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.deparment.id})
		</foreach>
		<!-- 
			这种方式需要数据库连接属性allowMultiQueries=true；
			这种分号分隔多个sql可以用于其他的批量操作（更新、删除）
		 -->
<!-- 		<foreach collection="emps" item="emp" separator=";">
			insert into tbl_employee (last_name, email, gender, d_id)
			values
			(#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.deparment.id})
		</foreach> -->
	</insert>
	
	<insert id="addEmps" databaseId="oracle">
		<!-- Oralce第一种批量方式  -->
<!--  		<foreach collection="emps" item="emp" open="begin" close="end;">
			insert into tbl_employee (id, last_name, email, gender, d_id)
			values
			(employee_seq.nextval, #{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.deparment.id});
		</foreach> -->
		
		<!-- Oralce第二种批量方式  -->
		insert into tbl_employee (id, last_name, email, gender, d_id)
			<foreach collection="emps" item="emp" separator="union" 
				open="select employee_seq.nextval, lastName, email, gender, dId from (" 
				close=")">
				select #{emp.lastName} lastName, #{emp.email} email, #{emp.gender} gender, #{emp.deparment.id} dId from dual
			</foreach>
	</insert>
	
	<!-- 两个内置参数：
		不只是方法传递过来的参数可以用来判断，取值。。。
		mybatis默认还有两个内置参数；
		_parameter：代表整个参数
			单个参数：_parameter就是这个参数
			多个参数：参数就会被封装为一个map：_parameter就是代表这个map
			
		_databaseId：如果配置了databaseIdProvider标签
			_databaseId就是代表当前数据库的别名oracle	
	 -->
	 <select id="getEmpsTestInnerParameter" resultType="com.yws.bean.Employee">
	 	<if test="_databaseId == 'mysql'">
	 		select * from tbl_employee
	 		<!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值  -->
	 		<bind name="_lastName" value="'%' + lastName + '%'"/>
	 		<if test="_parameter != null">
	 			where last_name like #{_lastName}
<!-- 	 			where last_name like #{_parameter.lastName} -->
	 			<!-- where last_name like #{lastName} -->
	 		</if>
	 	</if>
	 	<if test="_databaseId == 'oracle'">
	 		select * from tbl_employee
	 	</if>
	 </select>
	 
	 
	 <!-- 抽取可重用的sql片段，方便后面引用
			1.sql抽取，经常将要查询的列名，或者插入用的列名抽取出来方便引用
			2.include来引用已经抽取的sql
			3.include还可以自定义一些property，sql标签内部就能使用自定义的属性
				include->property，取值的正确方式：${prop} 注意：不能使用#{}
	 -->
	 <sql id="insertColumn">
	 	<if test="_databaseId == 'mysql'">
	 		last_name, email, ${testColumn}, d_id
	 	</if>
	 	<if test="_databaseId == 'oracle'">
	 		last_name, email, gender, d_id
	 	</if>
	 </sql>
	 
	
</mapper>