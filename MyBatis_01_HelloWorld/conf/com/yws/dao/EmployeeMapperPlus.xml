<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yws.dao.EmployeeMapperPlus">
	<resultMap type="com.yws.bean.Employee" id="mySimpleEmp">
		<!-- 
			指定主键列的封装规则
			column：指定哪一列
			property：指定对应的JavaBean属性
		 -->
		<id column="id" property="id"/>
		<!-- 
			定义普通列封装规则
		 -->
		<result column="last_name" property="lastName"/>
		<!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上 -->
		<result column="email" property="email"/>		
		<result column="gender" property="gender"/>
	</resultMap>
	<!-- resultMap：自定义结果集映射规则 -->
	<select id="getEmpById" resultMap="mySimpleEmp">
		select * from 
			tbl_employee
		where id=#{id}
	</select>
	
	
	<!--
		联合查询：级联属性封装结果集
	  -->
	<resultMap type="com.yws.bean.Employee" id="myDifEmp">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<result column="d_id" property="deparment.id"/>
		<result column="department_name" property="deparment.departmentName"/>
	</resultMap>
	
	<!-- 
		association可以指定联合的javaBean对象
		property="deparment"：指定哪个属性是联合对象
		javaType：指定这个属性对象的类型【不能省略】
	  -->
	<resultMap type="com.yws.bean.Employee" id="myDifEmp2">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<association property="deparment" javaType="com.yws.bean.Department">
			<id column="d_id" property="id"/>
			<result column="department_name" property="departmentName"/>
		</association>
	</resultMap>
	<select id="getEmpAndDept" resultMap="myDifEmp2">
		select e.id,e.last_name,e.email,e.gender,d.id d_id,d.department_name from 
			tbl_employee e,tbl_dept d 
		where
			e.d_id=d.id and e.id=#{id}
	</select>

	<!-- 
		使用association进行分布查询：
		1.先按员工id查询员工信息
		2.根据查询员工信息中的d_id值q部门表查出部门信息
		3.部门设置到员工中
	 -->
	<resultMap type="com.yws.bean.Employee" id="MyEmpByStep">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<!-- association定义关联对象的封装规则 
			select：表明当前属性是调用select指定的方法查出的结果
			column：指定将哪一列的值传给这个方法
			
			流程：使用select指定的方法(传入column指定的这列参数的值)查出对象，并封装给property指定的属性
		-->
		<association property="deparment" 
			select="com.yws.dao.DepartmentMapper.getDepById"
			column="d_id"></association>
	</resultMap>
	
	<select id="getEmpByIdStep" resultMap="MyEmpDis">
		select * from tbl_employee where id=#{id}
	</select>
	
	
	<!-- 
		可以使用延迟加载：（按需加载）
		Employee->Dept
			我们每次查询Employee对象的时候，都将一起查询出来。
			部门信息在我们使用的时候再去查询；
			分段查询的基础上加上两个配置
	 -->
	
	<!-- ====================association==================== -->
	
	<!-- 
		场景二
			查询部门的时候，将对应部门的员工信息也查询出来，详细在DepartmentMapper.xml
	 -->
	 
	 <!-- ==================== -->
	 <select id="getEmpsByDeptId" resultType="com.yws.bean.Employee">
	 	select * from tbl_employee where d_id = #{did}
	 </select>
	 
	 
	 
	 <!-- 
	 	<discriminator javaType=""></discriminator>
	 	鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
	 	封装：Employee:
	 		如果查出的是女生，就把部门信息查询出来，否则不查询
			如果是男生，把last_name这一列的值赋值给email	 		
	  -->
	  <resultMap type="com.yws.bean.Employee" id="MyEmpDis">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		
		<!--
			column：指定判断的列名
			javaType：列值对应的java类型
		  -->
		<discriminator javaType="string" column="gender">
			<!-- 女生  resultType：指定封装的结果类型，不能缺少。或者用resultMap-->
			<case value="0" resultType="com.yws.bean.Employee">
				<association property="deparment" 
					select="com.yws.dao.DepartmentMapper.getDepById"
					column="d_id"></association> 			
			</case>
			<!-- 男生 把last_name这一列的值赋值给email	 -->
			<case value="1" resultType="com.yws.bean.Employee">
				<id column="id" property="id"/>
				<result column="last_name" property="lastName"/>
				<result column="last_name" property="email"/>
				<result column="gender" property="gender"/>				
			</case>
		
		</discriminator>
	  </resultMap>

</mapper>